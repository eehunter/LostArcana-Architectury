plugins {
    id ("com.github.johnrengelman.shadow")
    id ("org.jetbrains.kotlin.jvm")
}

architectury {
    platformSetupLoomIde()
    fabric()
}

fabricApi {
    configureDataGeneration() {
        modId = "lostarcana"
        client = true
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    modImplementation("net.fabricmc:fabric-language-kotlin:1.13.4+kotlin.2.2.0")

    modImplementation "maven.modrinth:fusion-connected-textures:$rootProject.fusion_version-fabric-mc$rootProject.fusion_mc_version"

    modRuntimeOnly "software.bernie.geckolib:geckolib-fabric-${minecraft_version}:${geckolib_version}"

    modCompileOnly "dev.emi:emi-fabric:${emi_version}:api"
    modLocalRuntime "dev.emi:emi-fabric:${emi_version}"

    modImplementation ("com.klikli_dev:modonomicon-${minecraft_version}-fabric:${modonomicon_version}"){
        exclude group: 'mezz.jei', module: "jei-${minecraft_version}-common-api"
        exclude group: 'mezz.jei', module: "jei-${minecraft_version}-fabric-api"
        exclude group: 'mezz.jei', module: "jei-${minecraft_version}-fabric"
    }
}

processResources {
    inputs.property ("version"), project.version

    filesMatching("fabric.mod.json") {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
}
repositories {
    mavenCentral()
}
kotlin {
    jvmToolchain(21)
    compilerOptions{
        freeCompilerArgs.add("-Xcontext-parameters")
    }
}
