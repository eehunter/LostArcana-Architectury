plugins {
    id ("com.github.johnrengelman.shadow")
    id ("org.jetbrains.kotlin.jvm")
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

sourceSets {
    java {
        compileClasspath += main.output
        //compileClasspath += kotlin.output
        runtimeClasspath += main.output
        //runtimeClasspath += kotlin.output
        kotlin {

        }
    }
    kotlin {
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = ("NeoForged")
        url = ("https://maven.neoforged.net/releases")
    }
    maven {
        name = ("kotlinforforge")
        url = ("https://thedarkcolour.github.io/KotlinForForge/")
    }
    mavenCentral()
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"



    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation ("thedarkcolour:kotlinforforge-neoforge:$rootProject.kotlin_for_forge_version"){
        exclude(group: "net.neoforged")
        exclude(group: "net.neoforged.fancymodloader")
    }

    modImplementation ("maven.modrinth:fusion-connected-textures:$rootProject.fusion_version-neoforge-mc$rootProject.fusion_mc_version")

    implementation "software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:${geckolib_version}"

    compileOnly "dev.emi:emi-neoforge:${emi_version}:api"
    runtimeOnly "dev.emi:emi-neoforge:${emi_version}"

    implementation ("com.klikli_dev:modonomicon-${minecraft_version}-neoforge:${modonomicon_version}"){transitive=false}
}

processResources {
    inputs.property "version", project.version
    inputs.property("kotlin_for_forge_version", project.kotlin_for_forge_version)
    inputs.property("mod_id", rootProject.modid)

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version, kotlin_for_forge_version: project.kotlin_for_forge_version, mod_id: project.modid
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
kotlin {
    jvmToolchain(21)
}

compileKotlin{

}
